{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPe9qbIhw5J4Q3wonRpyA/7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i5TJIawUPIL5","executionInfo":{"status":"ok","timestamp":1698026661771,"user_tz":-540,"elapsed":1179,"user":{"displayName":"서상훈","userId":"08223198468266376619"}},"outputId":"c6b9ac33-7417-4edb-8caa-b2505ca27deb"},"outputs":[{"output_type":"stream","name":"stdout","text":["0 0\n","50 0\n","100 0\n","150 0\n","200 0\n","250 0\n","300 0\n","350 0\n","400 0\n","450 0\n","500 0\n","550 0\n","600 0\n","650 0\n","700 0\n","750 0\n","800 0\n","850 0\n","900 0\n","950 0\n","X: [1 1] Y: [1] Output: 1 result: 1.0\n","X: [1 0] Y: [0] Output: 0 result: 0.0\n","X: [0 1] Y: [0] Output: 0 result: 0.0\n","X: [0 0] Y: [0] Output: 0 result: 0.0\n"]}],"source":["import numpy as np\n","import tensorflow as tf\n","\n","def step_func(x):\n","  return (x>=0)*1\n","\n","x = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])\n","y = np.array([[1], [0], [0], [0]])\n","w = tf.random.normal([2], 0, 1)\n","b = 1.0\n","w0 = 0.5\n","a = 0.1\n","\n","for i in range(1000):\n","  error_sum = 0\n","  for j in range(4):\n","    output = step_func(np.sum(x[j]*w)+b*w0)\n","    error = y[j][0] - output\n","    w = w + x[j] * a * error\n","    w0 = w0 + a * error\n","    error_sum += error\n","\n","  if i % 50 == 0:\n","    print(i, error_sum)\n","\n","for i in range(4):\n","  if step_func(np.sum(x[i]*w)+b*w0) > 0.0:\n","    output = 1.0\n","  else:\n","    output = 0.0\n","  print('X:', x[i], 'Y:', y[i], 'Output:', step_func(np.sum(x[i]*w)+b*w0), 'result:', output)\n"]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","\n","def sigmoid(x):\n","  return 1/(1+np.exp(-x))\n","\n","x = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])\n","y = np.array([[1], [0], [0], [0]])\n","w = tf.random.normal([2], 0, 1)\n","b = 1.0\n","w0 = 0.5\n","a = 0.1\n","\n","for i in range(1000):\n","  error_sum = 0\n","  for j in range(4):\n","    output = sigmoid(np.sum(x[j]*w)+b*w0)\n","    error = y[j][0] - output\n","    w = w + x[j] * a * error\n","    w0 = w0 + a * error\n","    error_sum += error\n","\n","  if i % 50 == 0:\n","    print(i, error_sum)\n","\n","for i in range(4):\n","  if sigmoid(np.sum(x[i]*w)+b*w0) > 0.5:\n","    output = 1.0\n","  else:\n","    output = 0.0\n","  print('X:', x[i], 'Y:', y[i], 'Output:', sigmoid(np.sum(x[i]*w)+b*w0), 'result:', output)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fmpt71aMQtae","executionInfo":{"status":"ok","timestamp":1698026674072,"user_tz":-540,"elapsed":1156,"user":{"displayName":"서상훈","userId":"08223198468266376619"}},"outputId":"abfe1066-f9b6-40a9-fab5-32a8026ec0d3"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["0 -1.1330572662259384\n","50 -0.260684201732457\n","100 -0.18012154373214548\n","150 -0.1392373869720803\n","200 -0.11421441605837848\n","250 -0.0970648745231622\n","300 -0.08446463723739452\n","350 -0.07476862841007618\n","400 -0.06705846521529897\n","450 -0.060773704631642306\n","500 -0.05554945022973931\n","550 -0.05113857996752194\n","600 -0.04736438324644812\n","650 -0.04409883698239405\n","700 -0.04124646431024\n","750 -0.03873404549802729\n","800 -0.03650440869341657\n","850 -0.03451257284650054\n","900 -0.032722559526378536\n","950 -0.031106278190577846\n","X: [1 1] Y: [1] Output: 0.9308000612284963 result: 1.0\n","X: [1 0] Y: [0] Output: 0.04864861215280311 result: 0.0\n","X: [0 1] Y: [0] Output: 0.04893469237494048 result: 0.0\n","X: [0 0] Y: [0] Output: 0.0001955692601309491 result: 0.0\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","\n","def sigmoid(x):\n","  return 1/(1+np.exp(-x))\n","\n","x = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])\n","y = np.array([[1], [1], [1], [0]])\n","w = tf.random.normal([2], 0, 1)\n","b = 1.0\n","w0 = 0.5\n","a = 0.1\n","\n","for i in range(1000):\n","  error_sum = 0\n","  for j in range(4):\n","    output = sigmoid(np.sum(x[j]*w)+b*w0)\n","    error = y[j][0] - output\n","    w = w + x[j] * a * error\n","    w0 = w0 + a * error\n","    error_sum += error\n","\n","  if i % 50 == 0:\n","    print(i, error_sum)\n","\n","for i in range(4):\n","  if sigmoid(np.sum(x[i]*w)+b*w0) > 0.5:\n","    output = 1.0\n","  else:\n","    output = 0.0\n","  print('X:', x[i], 'Y:', y[i], 'Output:', sigmoid(np.sum(x[i]*w)+b*w0), 'result:', output)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fDrSmsx5SI8p","executionInfo":{"status":"ok","timestamp":1698026840447,"user_tz":-540,"elapsed":899,"user":{"displayName":"서상훈","userId":"08223198468266376619"}},"outputId":"78060e18-34a9-4e98-c617-bc9c660e435f"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["0 0.4209660612491971\n","50 -0.1501135198206741\n","100 -0.09265559072707491\n","150 -0.06516650671549018\n","200 -0.0502263537562439\n","250 -0.04084785163297788\n","300 -0.03439566795934251\n","350 -0.029680015832292794\n","400 -0.026082716293644864\n","450 -0.023248947048963076\n","500 -0.02096030128016542\n","550 -0.0190741376883668\n","600 -0.017493583767546575\n","650 -0.01615061319381897\n","700 -0.014995761074626163\n","750 -0.013992364576292118\n","800 -0.01311276269747029\n","850 -0.012335625705829543\n","900 -0.011644016756098143\n","950 -0.01102480614671654\n","X: [1 1] Y: [1] Output: 0.9999760145585738 result: 1.0\n","X: [1 0] Y: [1] Output: 0.9794621989222585 result: 1.0\n","X: [0 1] Y: [1] Output: 0.9793431125526043 result: 1.0\n","X: [0 0] Y: [0] Output: 0.05144288821573314 result: 0.0\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","\n","x = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])\n","y = np.array([[0], [1], [1], [0]])\n","\n","model = tf.keras.Sequential ()\n","\n","model.add(tf.keras.layers.Dense(units=2, input_dim=2, activation='sigmoid'))\n","\n","model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n","\n","model.compile(optimizer=tf.optimizers.SGD(learning_rate=0.1), loss='mse')\n","\n","model.summary()\n","\n","history = model.fit(x, y, epochs=3000, batch_size=1)\n","\n","print(\"===============weights================\")\n","\n","for weight in model.weights:\n","  print(weight)\n","\n","print(\"==============test results===============\")\n","print(x)\n","print(model.predict(x))\n","print(\"=========================================\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TE7o9tllX4_f","executionInfo":{"status":"ok","timestamp":1698028979060,"user_tz":-540,"elapsed":416,"user":{"displayName":"서상훈","userId":"08223198468266376619"}},"outputId":"09c9411d-b1d5-4b50-8308-dfbd3e2c9e26"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r4/4 [==============================] - 0s 2ms/step - loss: 0.0108\n","Epoch 2958/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0108\n","Epoch 2959/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0108\n","Epoch 2960/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0107\n","Epoch 2961/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2962/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2963/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2964/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2965/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2966/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2967/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0107\n","Epoch 2968/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2969/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2970/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2971/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2972/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2973/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2974/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2975/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0106\n","Epoch 2976/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2977/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2978/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2979/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2980/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2981/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2982/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0105\n","Epoch 2983/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0105\n","Epoch 2984/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0104\n","Epoch 2985/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0104\n","Epoch 2986/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0104\n","Epoch 2987/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0104\n","Epoch 2988/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0104\n","Epoch 2989/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0104\n","Epoch 2990/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0104\n","Epoch 2991/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0104\n","Epoch 2992/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0103\n","Epoch 2993/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0103\n","Epoch 2994/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0103\n","Epoch 2995/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0103\n","Epoch 2996/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0103\n","Epoch 2997/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0103\n","Epoch 2998/3000\n","4/4 [==============================] - 0s 2ms/step - loss: 0.0103\n","Epoch 2999/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0103\n","Epoch 3000/3000\n","4/4 [==============================] - 0s 3ms/step - loss: 0.0102\n","===============weights================\n","<tf.Variable 'dense/kernel:0' shape=(2, 2) dtype=float32, numpy=\n","array([[3.0760493, 5.4206214],\n","       [3.105992 , 5.607837 ]], dtype=float32)>\n","<tf.Variable 'dense/bias:0' shape=(2,) dtype=float32, numpy=array([-4.697896 , -2.1576424], dtype=float32)>\n","<tf.Variable 'dense_1/kernel:0' shape=(2, 1) dtype=float32, numpy=\n","array([[-7.0080085],\n","       [ 6.424754 ]], dtype=float32)>\n","<tf.Variable 'dense_1/bias:0' shape=(1,) dtype=float32, numpy=array([-2.8092291], dtype=float32)>\n","==============test results===============\n","[[1 1]\n"," [1 0]\n"," [0 1]\n"," [0 0]]\n","1/1 [==============================] - 0s 159ms/step\n","[[0.10926308]\n"," [0.9022708 ]\n"," [0.9031489 ]\n"," [0.09914168]]\n","=========================================\n"]}]}]}